{"version":3,"sources":["../src/index.js"],"names":["argv","process","slice","files","_","sort","attributes","attribute","outputFile","output","length","console","log","exit","defaultAttributes","finalAttributes","push","concat","extractor","forEach","filename","extension","split","pop","data","readFileSync","encoding","toString","parse","e","trace","writeFileSync"],"mappings":";;AAEA;;;;AACA;;;;AAEA;;;;;;AAGA,IAAMA,OAAO,wBAASC,QAAQD,IAAR,CAAaE,KAAb,CAAmB,CAAnB,CAAT,CAAb;AACA,IAAMC,QAAQH,KAAKI,CAAL,CAAOC,IAAP,MAAiB,EAA/B;AACA,IAAMC,aAAaN,KAAKO,SAAL,IAAkB,EAArC;AACA,IAAMC,aAAaR,KAAKS,MAAL,IAAe,IAAlC;;AAEA,IAAI,CAACN,KAAD,IAAUA,MAAMO,MAAN,KAAiB,CAA/B,EAAkC;AAChCC,UAAQC,GAAR,CAAY,+EAAZ;AACAX,UAAQY,IAAR,CAAa,CAAb;AACD;;AAED,IAAMC,oBAAoB,CAAC,QAAD,CAA1B;AACA,IAAIC,kBAAkBD,iBAAtB;AACA,IAAI,OAAOR,UAAP,KAAsB,QAA1B,EAAoC;AAClCS,kBAAgBC,IAAhB,CAAqBV,UAArB;AACD,CAFD,MAEO;AACLS,oBAAkBA,gBAAgBE,MAAhB,CAAuBX,UAAvB,CAAlB;AACD;;AAED,IAAMY,YAAY,wBAAc;AAC9BZ,cAAYS;AADkB,CAAd,CAAlB;;AAIAZ,MAAMgB,OAAN,CAAc,UAAUC,QAAV,EAAoB;AAChC,MAAMC,YAAYD,SAASE,KAAT,CAAe,GAAf,EAAoBC,GAApB,EAAlB;AACA,MAAIF,cAAc,KAAlB,EAAyB;AACvBV,YAAQC,GAAR,WAAoBQ,QAApB,wBAA+CC,SAA/C;AACA;AACD;;AAED,MAAIG,OAAO,aAAGC,YAAH,CAAgBL,QAAhB,EAA0B,EAACM,UAAU,OAAX,EAA1B,EAA+CC,QAA/C,EAAX;;AAEA,MAAI;AACFT,cAAUU,KAAV,CAAgBR,QAAhB,EAA0BI,IAA1B;AACD,GAFD,CAEE,OAAOK,CAAP,EAAU;AACVlB,YAAQmB,KAAR,CAAcD,CAAd;AACA5B,YAAQY,IAAR,CAAa,CAAb;AACD;AACF,CAfD;;AAiBA,IAAMJ,SAASS,UAAUS,QAAV,EAAf;AACA,IAAInB,UAAJ,EAAgB;AACd,eAAGuB,aAAH,CAAiBvB,UAAjB,EAA6BC,MAA7B;AACD,CAFD,MAEO;AACLE,UAAQC,GAAR,CAAYH,MAAZ;AACD","file":"index.js","sourcesContent":["\n\nimport fs from 'fs'\nimport minimist from 'minimist'\n\nimport Extractor from './extractor.js'\n\n\nconst argv = minimist(process.argv.slice(2))\nconst files = argv._.sort() || []\nconst attributes = argv.attribute || []\nconst outputFile = argv.output || null\n\nif (!files || files.length === 0) {\n  console.log('Usage: vue-i18n-xgettext [--attribute ATTRIBUTE] [--output OUTPUT_FILE] FILES')\n  process.exit(1)\n}\n\nconst defaultAttributes = ['v-text']\nvar finalAttributes = defaultAttributes\nif (typeof attributes === 'string') {\n  finalAttributes.push(attributes)\n} else {\n  finalAttributes = finalAttributes.concat(attributes)\n}\n\nconst extractor = new Extractor({\n  attributes: finalAttributes\n})\n\nfiles.forEach(function (filename) {\n  const extension = filename.split('.').pop()\n  if (extension !== 'vue') {\n    console.log(`file ${filename} with extension ${extension} will not be processed (skipped)`)\n    return\n  }\n\n  let data = fs.readFileSync(filename, {encoding: 'utf-8'}).toString()\n\n  try {\n    extractor.parse(filename, data)\n  } catch (e) {\n    console.trace(e)\n    process.exit(1)\n  }\n})\n\nconst output = extractor.toString()\nif (outputFile) {\n  fs.writeFileSync(outputFile, output)\n} else {\n  console.log(output)\n}\n\n"]}